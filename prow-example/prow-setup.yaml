# Hook Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hook
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hook
  template:
    metadata:
      labels:
        app: hook
    spec:
      serviceAccountName: hook
      automountServiceAccountToken: true
      containers:
        - name: hook
          image: gcr.io/k8s-prow/hook:latest
          command:
            - /bin/sh
            - -c
            - "apk update && apk add curl && if ! command -v curl; then echo 'curl installation failed'; exit 1; fi && sleep infinity"
          env:
            - name: LOGRUS_LEVEL
              value: "debug"
            - name: HTTP_PROXY
              value: "http://${PROXY_IP}:${PROXY_PORT}"
            - name: HTTPS_PROXY
              value: "http://${PROXY_IP}:${PROXY_PORT}"
            - name: NO_PROXY
              value: "localhost,127.0.0.1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
          ports:
            - containerPort: 8888
          volumeMounts:
            - name: hmac
              mountPath: /etc/hmac
              readOnly: true
            - name: github-token
              mountPath: /etc/github
              readOnly: true
            - name: config
              mountPath: /etc/config
              readOnly: true
            - name: plugins
              mountPath: /etc/plugins
              readOnly: true
            - name: job-config
              mountPath: /etc/job-config
              readOnly: true
      volumes:
        - name: hmac
          secret:
            secretName: hmac-token
        - name: github-token
          secret:
            secretName: github-token
        - name: config
          configMap:
            name: config
        - name: plugins
          configMap:
            name: plugins
        - name: job-config
          configMap:
            name: job-config

---
# Hook Service
apiVersion: v1
kind: Service
metadata:
  name: hook
  namespace: default
spec:
  selector:
    app: hook
  ports:
    - port: 8888
      targetPort: 8888
      nodePort: 30001
  type: NodePort

---
# Deck Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deck
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deck
  template:
    metadata:
      labels:
        app: deck
    spec:
      serviceAccountName: deck
      automountServiceAccountToken: true
      containers:
        - name: deck
          image: gcr.io/k8s-prow/deck:latest
          command:
            - /bin/sh
            - -c
            - "apk update && apk add curl && if ! command -v curl; then echo 'curl installation failed'; exit 1; fi && sleep infinity"
          env:
            - name: LOGRUS_LEVEL
              value: "debug"
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: config
              mountPath: /etc/config
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: config

---
# Deck Service
apiVersion: v1
kind: Service
metadata:
  name: deck
  namespace: default
spec:
  selector:
    app: deck
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30002
  type: NodePort

---
# Prow Controller Manager Deployment (replacing Plank)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prow-controller-manager
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prow-controller-manager
  template:
    metadata:
      labels:
        app: prow-controller-manager
    spec:
      serviceAccountName: plank
      automountServiceAccountToken: true
      containers:
        - name: prow-controller-manager
          image: gcr.io/k8s-prow/prow-controller-manager:latest
          command:
            - /bin/sh
            - -c
            - "apk update && apk add curl && if ! command -v curl; then echo 'curl installation failed'; exit 1; fi && sleep infinity"
          env:
            - name: LOGRUS_LEVEL
              value: "debug"
          volumeMounts:
            - name: config
              mountPath: /etc/config
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: config