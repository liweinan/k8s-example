# Hook Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hook
  namespace: prow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hook
  template:
    metadata:
      labels:
        app: hook
    spec:
      containers:
      - name: hook
        image: gcr.io/k8s-prow/hook:ko-v20240805-37a08f946
        command:
        - /bin/sh
        - -c
        - "apk update && apk add curl && if ! command -v curl; then echo 'curl installation failed'; exit 1; fi && sleep infinity"
        env:
        - name: LOGRUS_LEVEL
          value: "debug"
        ports:
        - containerPort: 8888
        volumeMounts:
        - name: hmac
          mountPath: /etc/hmac
          readOnly: true
        - name: github-token
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: plugins
          mountPath: /etc/plugins
          readOnly: true
      volumes:
      - name: hmac
        secret:
          secretName: hmac-token
      - name: github-token
        secret:
          secretName: github-token
      - name: config
        configMap:
          name: config
      - name: plugins
        configMap:
          name: plugins

---
# Hook Service
apiVersion: v1
kind: Service
metadata:
  name: hook
  namespace: prow
spec:
  selector:
    app: hook
  ports:
  - port: 8888
    targetPort: 8888
    nodePort: 30001
  type: NodePort

---
# Deck Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deck
  namespace: prow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deck
  template:
    metadata:
      labels:
        app: deck
    spec:
      containers:
      - name: deck
        image: gcr.io/k8s-prow/deck:ko-v20240805-37a08f946
        command:
        - /bin/sh
        - -c
        - "apk update && apk add curl && if ! command -v curl; then echo 'curl installation failed'; exit 1; fi && sleep infinity"
        env:
        - name: LOGRUS_LEVEL
          value: "debug"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config

---
# Deck Service
apiVersion: v1
kind: Service
metadata:
  name: deck
  namespace: prow
spec:
  selector:
    app: deck
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30002
  type: NodePort
